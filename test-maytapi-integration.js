const axios = require('axios');
require('dotenv').config();

// Configura√ß√µes da Maytapi
const PRODUCT_ID = process.env.MAYTAPI_PRODUCT_ID;
const TOKEN = process.env.MAYTAPI_TOKEN;
const API_URL = process.env.MAYTAPI_API_URL || 'https://api.maytapi.com/api';

const headers = {
  'Content-Type': 'application/json',
  'x-maytapi-key': TOKEN
};

async function testMaytapiConnection() {
  console.log('üß™ Testando conex√£o com Maytapi...');
  console.log(`üì± Product ID: ${PRODUCT_ID}`);
  console.log(`üîó API URL: ${API_URL}`);
  console.log('');

  try {
    // 1. Testar autentica√ß√£o listando telefones
    console.log('1Ô∏è‚É£ Testando autentica√ß√£o...');
    const phonesResponse = await axios.get(
      `${API_URL}/${PRODUCT_ID}/listPhones`,
      { headers }
    );

    console.log('‚úÖ Autentica√ß√£o bem-sucedida!');
    console.log('üì± Telefones existentes:', phonesResponse.data.data?.length || 0);
    
    if (phonesResponse.data.data && phonesResponse.data.data.length > 0) {
      console.log('üìã Lista de telefones:');
      phonesResponse.data.data.forEach((phone, index) => {
        console.log(`   ${index + 1}. ID: ${phone.id}, Status: ${phone.status}, N√∫mero: ${phone.number || 'N/A'}`);
      });
    }
    console.log('');

    // 2. Verificar inst√¢ncias existentes
    console.log('2Ô∏è‚É£ Verificando inst√¢ncias existentes...');
    if (phonesResponse.data.data && phonesResponse.data.data.length > 0) {
      const phoneId = phonesResponse.data.data[0].id;
      console.log(`‚úÖ Usando inst√¢ncia existente: ${phoneId}`);
      console.log('');

      // 3. Verificar status da inst√¢ncia
      console.log('3Ô∏è‚É£ Verificando status da inst√¢ncia...');
      const statusResponse = await axios.get(
        `${API_URL}/${PRODUCT_ID}/${phoneId}/status`,
        { headers }
      );

      console.log('üìä Status da inst√¢ncia:', statusResponse.data.data);
      console.log('');

      // 4. Tentar obter QR Code (se dispon√≠vel)
      console.log('4Ô∏è‚É£ Tentando obter QR Code...');
      try {
        const qrResponse = await axios.get(
          `${API_URL}/${PRODUCT_ID}/${phoneId}/screen`,
          { headers }
        );

        if (qrResponse.data.success && qrResponse.data.data.screen) {
          console.log('‚úÖ QR Code obtido com sucesso!');
          console.log('üì± Para conectar, escaneie o QR Code que ser√° exibido no frontend');
          console.log('üîó QR Data length:', qrResponse.data.data.screen.length);
        } else {
          console.log('‚ö†Ô∏è QR Code n√£o dispon√≠vel no momento');
        }
      } catch (qrError) {
        console.log('‚ö†Ô∏è QR Code n√£o dispon√≠vel:', qrError.response?.data?.message || qrError.message);
      }
      console.log('');

      // 5. Testar configura√ß√£o de webhook
      console.log('5Ô∏è‚É£ Informa√ß√µes sobre webhook...');
      console.log('üì° Para receber mensagens, configure o webhook na Maytapi:');
      console.log(`   URL: http://seu-dominio.com/api/maytapi/webhook`);
      console.log(`   M√©todo: POST`);
      console.log(`   Eventos: message, status`);
      console.log('');

    } else {
      console.log('‚ö†Ô∏è Nenhuma inst√¢ncia encontrada!');
      console.log('üí° Crie uma inst√¢ncia na dashboard da Maytapi:');
      console.log('   1. Acesse: https://console.maytapi.com/');
      console.log('   2. V√° em "Phones" > "Add Phone"');
      console.log('   3. Crie uma nova inst√¢ncia');
      console.log('');
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      console.log('');
      console.log('üîë Erro de autentica√ß√£o. Verifique:');
      console.log('   - MAYTAPI_PRODUCT_ID est√° correto');
      console.log('   - MAYTAPI_TOKEN est√° correto');
      console.log('   - As credenciais est√£o ativas na Maytapi');
    }
  }
}

async function testLocalServer() {
  console.log('üß™ Testando servidor local...');
  
  try {
    // Testar se o servidor est√° rodando
    const healthResponse = await axios.get('http://localhost:5000/health');
    console.log('‚úÖ Servidor local est√° rodando');
    
    // Testar endpoint de conex√µes Maytapi
    try {
      const connectionsResponse = await axios.get('http://localhost:5000/api/maytapi/connections');
      console.log('‚úÖ Endpoint Maytapi est√° funcionando');
      console.log('üì± Conex√µes ativas:', Object.keys(connectionsResponse.data.connections).length);
    } catch (maytapiError) {
      console.log('‚ö†Ô∏è Endpoint Maytapi n√£o est√° dispon√≠vel:', maytapiError.message);
    }
    
  } catch (error) {
    console.log('‚ùå Servidor local n√£o est√° rodando');
    console.log('üí° Execute: npm start');
  }
  
  console.log('');
}

async function main() {
  console.log('üöÄ TESTE DE INTEGRA√á√ÉO MAYTAPI');
  console.log('================================');
  console.log('');

  // Verificar vari√°veis de ambiente
  if (!PRODUCT_ID || !TOKEN) {
    console.log('‚ùå Configura√ß√£o incompleta!');
    console.log('');
    console.log('Verifique se as seguintes vari√°veis est√£o definidas no .env:');
    console.log('- MAYTAPI_PRODUCT_ID');
    console.log('- MAYTAPI_TOKEN');
    console.log('');
    return;
  }

  await testMaytapiConnection();
  await testLocalServer();

  console.log('üéâ TESTE CONCLU√çDO!');
  console.log('');
  console.log('üìã PR√ìXIMOS PASSOS:');
  console.log('1. Inicie o servidor: npm start');
  console.log('2. Acesse: http://localhost:3000/bots');
  console.log('3. Crie um bot e conecte via Maytapi');
  console.log('4. Configure o webhook na dashboard da Maytapi');
  console.log('5. Teste enviando mensagens!');
}

main().catch(console.error);
