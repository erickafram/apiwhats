#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß CORRIGINDO M√âTODO handleNoFlow');
console.log('=================================\n');

function fixHandleNoFlowMethod() {
  const filePath = './src/services/MaytapiFlowProcessor.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå Arquivo MaytapiFlowProcessor.js n√£o encontrado');
    return;
  }

  console.log('1Ô∏è‚É£ Lendo arquivo atual...');
  let content = fs.readFileSync(filePath, 'utf8');

  // Encontrar e substituir o m√©todo handleNoFlow
  const oldHandleNoFlow = `  async handleNoFlow(botId, phoneNumber, messageContent) {
    // Usar IA como fallback
    try {
      const AIService = require('./AIService');
      const aiService = new AIService();
      
      const response = await aiService.generateResponse(
        'Voc√™ √© um assistente virtual prestativo. Responda de forma amig√°vel.',
        messageContent
      );
      
      await this.sendMessage(botId, phoneNumber, response);
      return { success: true, usedAI: true };
      
    } catch (error) {
      console.error('‚ùå Erro na IA fallback:', error);
      return await this.sendErrorMessage(botId, phoneNumber);
    }
  }`;

  const newHandleNoFlow = `  async handleNoFlow(botId, phoneNumber, messageContent) {
    console.log(\`ü§ñ Nenhum fluxo encontrado para bot \${botId}, usando resposta padr√£o\`);
    
    // Resposta padr√£o mais √∫til em vez de erro
    const defaultResponse = \`üëã Ol√°! Como posso ajud√°-lo?

Comandos dispon√≠veis:
‚Ä¢ Digite "menu" - Ver op√ß√µes principais
‚Ä¢ Digite "ajuda" - Obter suporte
‚Ä¢ Digite "contato" - Falar conosco

Ou descreva o que voc√™ precisa que tentarei ajudar!\`;

    try {
      // Tentar usar IA primeiro
      const AIService = require('./AIService');
      const aiService = new AIService();
      
      const aiResponse = await aiService.generateResponse({
        message: messageContent,
        context: [],
        config: {
          system_prompt: 'Voc√™ √© um assistente virtual de uma auto mec√¢nica. Seja prestativo e amig√°vel. Se n√£o souber algo, oriente o cliente a usar o comando "menu" ou "contato".',
          temperature: 0.7,
          max_tokens: 150
        }
      });
      
      if (aiResponse && aiResponse.content) {
        await this.sendMessage(botId, phoneNumber, aiResponse.content);
        return { success: true, usedAI: true };
      } else {
        throw new Error('IA n√£o retornou resposta v√°lida');
      }
      
    } catch (error) {
      console.log(\`‚ö†Ô∏è IA indispon√≠vel para bot \${botId}, usando resposta padr√£o\`);
      
      // Em vez de erro, usar resposta padr√£o √∫til
      await this.sendMessage(botId, phoneNumber, defaultResponse);
      return { success: true, usedDefault: true };
    }
  }`;

  // Substituir o m√©todo
  if (content.includes('async handleNoFlow(botId, phoneNumber, messageContent)')) {
    content = content.replace(oldHandleNoFlow, newHandleNoFlow);
    console.log('2Ô∏è‚É£ M√©todo handleNoFlow substitu√≠do');
  } else {
    console.log('‚ö†Ô∏è M√©todo handleNoFlow n√£o encontrado na forma esperada');
    return;
  }

  // Melhorar tamb√©m o m√©todo sendErrorMessage para ser menos assustador
  const oldSendErrorMessage = `  async sendErrorMessage(botId, phoneNumber) {
    const errorMsg = 'Desculpe, ocorreu um erro. Tente novamente ou digite "ajuda" para obter suporte.';
    await this.sendMessage(botId, phoneNumber, errorMsg);
    return { success: false, error: true };
  }`;

  const newSendErrorMessage = `  async sendErrorMessage(botId, phoneNumber) {
    const helpMsg = \`ü§î N√£o entendi sua mensagem.

Tente:
‚Ä¢ "menu" - Ver op√ß√µes
‚Ä¢ "ajuda" - Obter suporte  
‚Ä¢ "contato" - Falar conosco

Ou reformule sua pergunta!\`;
    
    await this.sendMessage(botId, phoneNumber, helpMsg);
    return { success: true, showedHelp: true };
  }`;

  if (content.includes('async sendErrorMessage(botId, phoneNumber)')) {
    content = content.replace(oldSendErrorMessage, newSendErrorMessage);
    console.log('3Ô∏è‚É£ M√©todo sendErrorMessage melhorado');
  }

  // Melhorar o comando "menu" para ser mais robusto
  const menuCommandIndex = content.indexOf("messageContent.toLowerCase() === 'menu'");
  if (menuCommandIndex !== -1) {
    console.log('4Ô∏è‚É£ Comando menu encontrado e est√° OK');
  } else {
    console.log('‚ö†Ô∏è Comando menu pode precisar de ajustes');
  }

  // Salvar arquivo
  console.log('5Ô∏è‚É£ Salvando arquivo modificado...');
  fs.writeFileSync(filePath, content, 'utf8');
  
  console.log('‚úÖ Arquivo MaytapiFlowProcessor.js corrigido!');
  
  console.log('\nüéØ MUDAN√áAS REALIZADAS:');
  console.log('   ‚Ä¢ handleNoFlow agora usa resposta √∫til em vez de erro');
  console.log('   ‚Ä¢ IA como primeira op√ß√£o, resposta padr√£o como fallback');
  console.log('   ‚Ä¢ sendErrorMessage agora √© mais amig√°vel');
  console.log('   ‚Ä¢ Orienta√ß√µes claras para o usu√°rio');

  console.log('\nüöÄ PR√ìXIMOS PASSOS:');
  console.log('   1. Execute: pm2 restart chatbot-whats-api');
  console.log('   2. Teste enviando qualquer mensagem');
  console.log('   3. Agora deve receber resposta √∫til em vez de erro');
}

// Executar corre√ß√£o
try {
  fixHandleNoFlowMethod();
  console.log('\nüéâ Corre√ß√£o conclu√≠da com sucesso!');
} catch (error) {
  console.error('‚ùå Erro durante corre√ß√£o:', error);
}
