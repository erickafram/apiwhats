const axios = require('axios');

async function testFrontendConnectionStatus() {
  console.log('üñ•Ô∏è TESTE DO STATUS DE CONEX√ÉO NO FRONTEND');
  console.log('==========================================');
  console.log('');

  try {
    // 1. Verificar servidor
    console.log('1Ô∏è‚É£ Verificando servidor...');
    await axios.get('http://localhost:5000/health');
    console.log('‚úÖ Servidor funcionando');
    console.log('');

    // 2. Verificar conex√µes Maytapi
    console.log('2Ô∏è‚É£ Testando API de conex√µes Maytapi...');
    try {
      const connectionsResponse = await axios.get('http://localhost:5000/api/maytapi/connections');
      console.log('‚úÖ API Maytapi funcionando');
      console.log('üì± Conex√µes ativas:', Object.keys(connectionsResponse.data.connections).length);
      
      if (Object.keys(connectionsResponse.data.connections).length > 0) {
        console.log('üìã Detalhes das conex√µes:');
        Object.entries(connectionsResponse.data.connections).forEach(([botId, connection]) => {
          console.log(`   Bot ${botId}: ${connection.connected ? '‚úÖ Conectado' : '‚ùå Desconectado'} (Phone: ${connection.phoneId})`);
        });
      }
    } catch (maytapiError) {
      console.log('‚ö†Ô∏è API Maytapi n√£o dispon√≠vel:', maytapiError.response?.data?.error || maytapiError.message);
    }
    console.log('');

    // 3. Conectar um bot via Maytapi
    console.log('3Ô∏è‚É£ Testando conex√£o de bot via Maytapi...');
    try {
      // Usar bot ID 1 como exemplo (ajuste conforme necess√°rio)
      const botId = 1;
      const connectResponse = await axios.post(`http://localhost:5000/api/maytapi/connect/${botId}`);
      
      console.log('‚úÖ Bot conectado via Maytapi!');
      console.log('üì± Phone ID:', connectResponse.data.phoneId);
      console.log('üìä Status:', connectResponse.data.status);
      console.log('üîó Conectado:', connectResponse.data.connected);
      
      // Aguardar um pouco e verificar novamente
      console.log('‚è≥ Aguardando 3 segundos...');
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const newConnectionsResponse = await axios.get('http://localhost:5000/api/maytapi/connections');
      console.log('üì± Conex√µes ap√≥s conectar:', Object.keys(newConnectionsResponse.data.connections).length);
      
    } catch (connectError) {
      console.log('‚ö†Ô∏è Erro ao conectar bot:', connectError.response?.data?.error || connectError.message);
      console.log('üí° Isso pode ser normal se o bot n√£o existir ou j√° estiver conectado');
    }
    console.log('');

    // 4. Testar API de status de conex√£o individual
    console.log('4Ô∏è‚É£ Testando API de status individual...');
    try {
      const botId = 1;
      const statusResponse = await axios.get(`http://localhost:5000/api/bots/${botId}/connection-status`);
      
      console.log('‚úÖ API de status funcionando');
      console.log('üìä Status do bot:', JSON.stringify(statusResponse.data, null, 2));
      
    } catch (statusError) {
      console.log('‚ö†Ô∏è Erro ao verificar status:', statusError.response?.data?.error || statusError.message);
      console.log('üí° Pode ser problema de autentica√ß√£o ou bot n√£o existir');
    }
    console.log('');

    // 5. Verificar frontend
    console.log('5Ô∏è‚É£ Verificando frontend...');
    try {
      const frontendResponse = await axios.get('http://localhost:3000');
      console.log('‚úÖ Frontend est√° rodando');
    } catch (frontendError) {
      console.log('‚ö†Ô∏è Frontend n√£o est√° rodando');
      console.log('üí° Execute: cd frontend && npm run dev');
    }
    console.log('');

    console.log('üéâ TESTE CONCLU√çDO!');
    console.log('');
    console.log('üìã FUNCIONALIDADES IMPLEMENTADAS:');
    console.log('‚úÖ API para verificar conex√µes Maytapi');
    console.log('‚úÖ API para conectar bots via Maytapi');
    console.log('‚úÖ API para verificar status individual');
    console.log('‚úÖ Frontend atualizado com status em tempo real');
    console.log('');
    console.log('üåê COMO TESTAR NO FRONTEND:');
    console.log('1. Acesse: http://localhost:3000/bots');
    console.log('2. Veja os chips de status dos bots');
    console.log('3. Clique em "Conectar WhatsApp" em um bot');
    console.log('4. Observe o status mudar para "Conectado (Maytapi: 103174)"');
    console.log('5. Veja o chip verde "Maytapi: 556392901378" aparecer');
    console.log('');
    console.log('üîÑ ATUALIZA√á√ïES AUTOM√ÅTICAS:');
    console.log('- Status atualiza a cada 30 segundos automaticamente');
    console.log('- Indicador de carregamento durante conex√£o');
    console.log('- Tooltips informativos nos bot√µes');
    console.log('');
    console.log('üì± INFORMA√á√ïES EXIBIDAS:');
    console.log('- Status: "Conectado (Maytapi: 103174)" quando conectado');
    console.log('- Chip verde: "Maytapi: 556392901378" com n√∫mero WhatsApp');
    console.log('- Tooltip: "Conectado via Maytapi (103174)" no bot√£o');
    console.log('- Loading spinner durante conex√£o');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('');
      console.log('üí° SOLU√á√ÉO: Servidor n√£o est√° rodando');
      console.log('   Execute: npm start');
    }
  }
}

testFrontendConnectionStatus().catch(console.error);
