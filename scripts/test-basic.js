const axios = require('axios');

const BASE_URL = 'http://localhost:5000';

async function testBasicSystem() {
  console.log('üß™ Testando funcionalidades b√°sicas do sistema...\n');

  try {
    // 1. Testar health check
    console.log('1Ô∏è‚É£ Testando health check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log('   ‚úÖ Health check OK:', healthResponse.data.status);

    // 2. Testar registro de usu√°rio
    console.log('\n2Ô∏è‚É£ Testando registro de usu√°rio...');
    const registerData = {
      name: 'Usu√°rio Teste B√°sico',
      email: `teste_basico_${Date.now()}@example.com`,
      password: 'teste123'
    };

    const registerResponse = await axios.post(`${BASE_URL}/api/auth/register`, registerData);
    console.log('   ‚úÖ Usu√°rio registrado:', registerResponse.data.user.name);
    
    const token = registerResponse.data.token;

    // 3. Testar login
    console.log('\n3Ô∏è‚É£ Testando login...');
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: registerData.email,
      password: registerData.password
    });
    console.log('   ‚úÖ Login realizado:', loginResponse.data.user.email);

    // 4. Testar verifica√ß√£o de token
    console.log('\n4Ô∏è‚É£ Testando verifica√ß√£o de token...');
    const verifyResponse = await axios.get(`${BASE_URL}/api/auth/verify`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('   ‚úÖ Token v√°lido:', verifyResponse.data.user.name);

    // 5. Testar cria√ß√£o de bot (sem includes complexos)
    console.log('\n5Ô∏è‚É£ Testando cria√ß√£o de bot...');
    const botData = {
      name: 'Bot de Teste B√°sico',
      description: 'Bot criado durante teste b√°sico',
      ai_config: {
        enabled: true,
        temperature: 0.7,
        max_tokens: 500,
        system_prompt: 'Voc√™ √© um bot de teste.'
      }
    };

    const botResponse = await axios.post(`${BASE_URL}/api/bots`, botData, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('   ‚úÖ Bot criado:', botResponse.data.bot.name);
    
    const botId = botResponse.data.bot.id;

    // 6. Testar busca de bot espec√≠fico
    console.log('\n6Ô∏è‚É£ Testando busca de bot espec√≠fico...');
    const botDetailResponse = await axios.get(`${BASE_URL}/api/bots/${botId}`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('   ‚úÖ Bot encontrado:', botDetailResponse.data.name);

    // 7. Testar atualiza√ß√£o de bot
    console.log('\n7Ô∏è‚É£ Testando atualiza√ß√£o de bot...');
    const updateResponse = await axios.put(`${BASE_URL}/api/bots/${botId}`, {
      description: 'Bot atualizado durante teste'
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('   ‚úÖ Bot atualizado:', updateResponse.data.bot.description);

    // 8. Testar listagem simples de bots
    console.log('\n8Ô∏è‚É£ Testando listagem de bots...');
    const botsResponse = await axios.get(`${BASE_URL}/api/bots?limit=5`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('   ‚úÖ Bots listados:', botsResponse.data.bots.length);

    console.log('\nüéâ Testes b√°sicos passaram com sucesso!');
    console.log('\nüìä Resumo dos testes b√°sicos:');
    console.log('   ‚úÖ Health check');
    console.log('   ‚úÖ Registro de usu√°rio');
    console.log('   ‚úÖ Login');
    console.log('   ‚úÖ Verifica√ß√£o de token');
    console.log('   ‚úÖ Cria√ß√£o de bot');
    console.log('   ‚úÖ Busca de bot espec√≠fico');
    console.log('   ‚úÖ Atualiza√ß√£o de bot');
    console.log('   ‚úÖ Listagem de bots');

    console.log('\n‚ú® Sistema b√°sico funcionando corretamente!');
    console.log('üí° Agora voc√™ pode testar o sistema completo com: npm run test:system');

  } catch (error) {
    console.error('\n‚ùå Erro durante os testes b√°sicos:');
    
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Dados:', error.response.data);
      console.error('   URL:', error.config.url);
    } else {
      console.error('   Erro:', error.message);
    }
    
    console.log('\nüîç Verifique se:');
    console.log('   - O servidor est√° rodando (npm run dev)');
    console.log('   - O banco de dados est√° configurado');
    console.log('   - As migrations foram executadas');
    
    process.exit(1);
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  testBasicSystem();
}

module.exports = testBasicSystem;
