#!/usr/bin/env node

const axios = require('axios');
require('dotenv').config();

// Configura√ß√µes do Whapi
const WHAPI_TOKEN = process.env.WHAPI_TOKEN || 'lPX5R5QAjWxazo8djm34yQTSSad8ZpZH';
const WHAPI_API_URL = process.env.WHAPI_API_URL || 'https://gate.whapi.cloud';

const headers = {
  'Content-Type': 'application/json',
  'Authorization': `Bearer ${WHAPI_TOKEN}`
};

async function testWhapiToken() {
  console.log('üîß TESTE DO TOKEN WHAPI');
  console.log('======================');
  console.log('');
  console.log(`üîó API URL: ${WHAPI_API_URL}`);
  console.log(`üîë Token: ${WHAPI_TOKEN.substring(0, 15)}...`);
  console.log('');

  try {
    // 1. Testar autentica√ß√£o b√°sica
    console.log('1Ô∏è‚É£ Testando autentica√ß√£o b√°sica...');
    try {
      const response = await axios.get(`${WHAPI_API_URL}/settings`, { headers });
      console.log('   ‚úÖ Token v√°lido! Configura√ß√µes obtidas.');
      console.log('   üìã Settings:', JSON.stringify(response.data, null, 2));
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('   ‚ùå Token inv√°lido ou expirado (401 Unauthorized)');
        console.log('   üîß Resposta:', error.response?.data);
        return false;
      } else {
        console.log('   ‚ùå Erro na API:', error.message);
        return false;
      }
    }

    // 2. Testar status da inst√¢ncia
    console.log('\n2Ô∏è‚É£ Testando status da inst√¢ncia...');
    try {
      const response = await axios.get(`${WHAPI_API_URL}/status`, { headers });
      console.log('   ‚úÖ Status obtido:', response.data);
    } catch (error) {
      console.log('   ‚ö†Ô∏è Erro ao obter status:', error.response?.data || error.message);
    }

    // 3. Testar endpoint /me
    console.log('\n3Ô∏è‚É£ Testando endpoint /me...');
    try {
      const response = await axios.get(`${WHAPI_API_URL}/me`, { headers });
      console.log('   ‚úÖ Informa√ß√µes da conta:', response.data);
    } catch (error) {
      console.log('   ‚ö†Ô∏è Endpoint /me n√£o dispon√≠vel (normal no Whapi)');
    }

    // 4. Verificar webhooks configurados
    console.log('\n4Ô∏è‚É£ Verificando webhooks...');
    try {
      const response = await axios.get(`${WHAPI_API_URL}/settings`, { headers });
      if (response.data.webhooks) {
        console.log('   ‚úÖ Webhooks configurados:', response.data.webhooks);
      } else {
        console.log('   ‚ö†Ô∏è Nenhum webhook configurado');
      }
    } catch (error) {
      console.log('   ‚ùå Erro ao verificar webhooks:', error.message);
    }

    console.log('\nüéâ TESTE CONCLU√çDO!');
    console.log('   O token est√° v√°lido e funcionando.');
    return true;

  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    return false;
  }
}

if (require.main === module) {
  testWhapiToken().then(success => {
    if (!success) {
      console.log('\nüîß A√á√ïES NECESS√ÅRIAS:');
      console.log('   1. Verificar se o token est√° correto no .env');
      console.log('   2. Renovar o token no painel do Whapi.cloud');
      console.log('   3. Atualizar a vari√°vel WHAPI_TOKEN');
    }
    process.exit(success ? 0 : 1);
  });
}

module.exports = testWhapiToken;
