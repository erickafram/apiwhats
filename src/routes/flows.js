const express = require('express');
const { Flow, Bot, FlowNode } = require('../models');
const { authenticateToken } = require('../middleware/auth');
const { validate, validateParams, validateQuery, schemas } = require('../middleware/validation');

const router = express.Router();

// Fun√ß√£o para sanitizar Unicode problem√°tico no JSON
function sanitizeUnicodeForJSON(data) {
  if (typeof data === 'string') {
    try {
      const parsed = JSON.parse(data);
      return JSON.stringify(sanitizeUnicodeForJSON(parsed));
    } catch {
      // Se n√£o for JSON v√°lido, sanitizar a string diretamente
      return data
        .replace(/[\u200D]/g, '') // Remove Zero Width Joiner (ZWJ)
        .replace(/[\uD800-\uDFFF]/g, '') // Remove surrogate pairs √≥rf√£os
        .replace(/[\u0000-\u001F\u007F-\u009F]/g, '') // Remove caracteres de controle
        .replace(/[\uFEFF]/g, ''); // Remove BOM
    }
  } else if (typeof data === 'object' && data !== null) {
    if (Array.isArray(data)) {
      return data.map(item => sanitizeUnicodeForJSON(item));
    } else {
      const result = {};
      for (const [key, value] of Object.entries(data)) {
        const sanitizedKey = typeof key === 'string' ? 
          key.replace(/[\u200D]/g, '').replace(/[\uD800-\uDFFF]/g, '') : key;
        result[sanitizedKey] = sanitizeUnicodeForJSON(value);
      }
      return result;
    }
  }
  return data;
}

// Aplicar autentica√ß√£o a todas as rotas
router.use(authenticateToken);

// Listar fluxos do usu√°rio
router.get('/', async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const sort = req.query.sort || 'created_at';
    const order = req.query.order || 'DESC';
    const bot_id = req.query.bot_id;
    const offset = (page - 1) * limit;

    const whereClause = {};

    // Se bot_id for fornecido, filtrar por bot
    if (bot_id) {
      // Verificar se o bot pertence ao usu√°rio
      const bot = await Bot.findOne({
        where: { id: bot_id, user_id: req.user.id }
      });

      if (!bot) {
        return res.status(404).json({
          error: 'Bot n√£o encontrado',
          code: 'BOT_NOT_FOUND'
        });
      }

      whereClause.bot_id = bot_id;
    } else {
      // Buscar apenas fluxos dos bots do usu√°rio
      const userBots = await Bot.findAll({
        where: { user_id: req.user.id },
        attributes: ['id']
      });

      if (userBots.length === 0) {
        return res.json({
          flows: [],
          pagination: {
            total: 0,
            page: page,
            limit: limit,
            pages: 0
          }
        });
      }

      whereClause.bot_id = userBots.map(bot => bot.id);
    }

    // Buscar fluxos sem associa√ß√µes
    const { count, rows: flows } = await Flow.findAndCountAll({
      where: whereClause,
      limit: limit,
      offset: offset,
      order: [[sort, order]]
    });

    // Buscar informa√ß√µes do bot separadamente para cada fluxo
    const flowsWithBotInfo = await Promise.all(
      flows.map(async (flow) => {
        try {
          const bot = await Bot.findByPk(flow.bot_id, {
            attributes: ['id', 'name']
          });

          return {
            ...flow.toJSON(),
            bot: bot ? bot.toJSON() : null
          };
        } catch (botError) {
          console.warn(`Erro ao buscar bot para fluxo ${flow.id}:`, botError.message);
          return {
            ...flow.toJSON(),
            bot: null
          };
        }
      })
    );

    res.json({
      flows: flowsWithBotInfo,
      pagination: {
        total: count,
        page: page,
        limit: limit,
        pages: Math.ceil(count / limit)
      }
    });
  } catch (error) {
    console.error('Erro ao listar fluxos:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Buscar fluxo por ID
router.get('/:id', validateParams(schemas.idParam), async (req, res) => {
  try {
    // Buscar fluxo primeiro
    const flow = await Flow.findByPk(req.params.id);

    if (!flow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    // Verificar se o bot pertence ao usu√°rio
    const bot = await Bot.findOne({
      where: { id: flow.bot_id, user_id: req.user.id },
      attributes: ['id', 'name', 'description']
    });

    if (!bot) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    // Buscar n√≥s do fluxo separadamente (se necess√°rio)
    try {
      const nodes = await FlowNode.findAll({
        where: { flow_id: flow.id },
        order: [['created_at', 'ASC']]
      });

      res.json({
        ...flow.toJSON(),
        bot: bot.toJSON(),
        nodes
      });
    } catch (nodeError) {
      console.warn(`Erro ao buscar n√≥s para fluxo ${flow.id}:`, nodeError.message);
      res.json({
        ...flow.toJSON(),
        bot: bot.toJSON(),
        nodes: []
      });
    }
  } catch (error) {
    console.error('Erro ao buscar fluxo:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// Criar novo fluxo
router.post('/', validate(schemas.createFlow), async (req, res) => {
  try {
    console.log('üîß DEBUG: Criando fluxo com dados:', JSON.stringify(req.body, null, 2));

    const { bot_id, ...flowData } = req.body;

    // bot_id √© obrigat√≥rio
    if (!bot_id) {
      console.log('üîß DEBUG: bot_id √© obrigat√≥rio');
      return res.status(400).json({
        error: 'bot_id √© obrigat√≥rio. Todo fluxo deve estar vinculado a um bot.',
        code: 'BOT_ID_REQUIRED'
      });
    }

    // Verificar se o bot pertence ao usu√°rio
    console.log('üîß DEBUG: Verificando bot_id:', bot_id, 'para usu√°rio:', req.user.id);
    const bot = await Bot.findOne({
      where: { id: bot_id, user_id: req.user.id }
    });

    if (!bot) {
      console.log('üîß DEBUG: Bot n√£o encontrado ou n√£o pertence ao usu√°rio');
      return res.status(404).json({
        error: 'Bot n√£o encontrado ou voc√™ n√£o tem permiss√£o para acess√°-lo',
        code: 'BOT_NOT_FOUND'
      });
    }

    console.log('üîß DEBUG: Bot encontrado:', bot.name);
    console.log('üîß DEBUG: Dados para criar fluxo:', {
      ...flowData,
      bot_id: bot_id
    });

    // Sanitizar flow_data antes de salvar
    if (flowData.flow_data) {
      flowData.flow_data = sanitizeUnicodeForJSON(flowData.flow_data);
      console.log('üîß DEBUG: flow_data sanitizado para cria√ß√£o');
    }

    const flow = await Flow.create({
      ...flowData,
      bot_id: bot_id
    });

    console.log('üîß DEBUG: Fluxo criado com sucesso:', flow.id);

    res.status(201).json({
      message: 'Fluxo criado com sucesso',
      flow
    });
  } catch (error) {
    console.error('üîß DEBUG: Erro ao criar fluxo:', error);
    console.error('üîß DEBUG: Stack trace:', error.stack);
    console.error('üîß DEBUG: Error details:', {
      name: error.name,
      message: error.message,
      sql: error.sql,
      parameters: error.parameters
    });

    res.status(500).json({
      error: 'Erro interno do servidor ao criar fluxo',
      code: 'INTERNAL_ERROR',
      details: error.message
    });
  }
});

// Atualizar fluxo
router.put('/:id', validateParams(schemas.idParam), validate(schemas.updateFlow), async (req, res) => {
  try {
    console.log(`üîß DEBUG: Atualizando fluxo ID ${req.params.id}`);
    console.log(`üîß DEBUG: Dados recebidos:`, JSON.stringify(req.body, null, 2));

    const flow = await Flow.findOne({
      where: { id: req.params.id },
      include: [
        {
          model: Bot,
          as: 'bot',
          where: { user_id: req.user.id }
        }
      ]
    });

    if (!flow) {
      console.log(`‚ùå DEBUG: Fluxo ${req.params.id} n√£o encontrado para usu√°rio ${req.user.id}`);
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    console.log(`‚úÖ DEBUG: Fluxo encontrado: ${flow.name}`);

    // Se est√° definindo como padr√£o, remover padr√£o dos outros fluxos do bot
    if (req.body.is_default === true) {
      await Flow.update(
        { is_default: false },
        { where: { bot_id: flow.bot_id, id: { [require('sequelize').Op.ne]: flow.id } } }
      );
      console.log(`üîß DEBUG: Removido is_default de outros fluxos do bot ${flow.bot_id}`);
    }

    const oldFlowData = flow.flow_data;
    
    // Sanitizar flow_data antes de atualizar
    if (req.body.flow_data) {
      req.body.flow_data = sanitizeUnicodeForJSON(req.body.flow_data);
      console.log('üîß DEBUG: flow_data sanitizado para atualiza√ß√£o');
    }
    
    await flow.update(req.body);

    console.log(`‚úÖ DEBUG: Fluxo ${req.params.id} atualizado com sucesso`);
    console.log(`üîß DEBUG: flow_data antes:`, JSON.stringify(oldFlowData, null, 2));
    console.log(`üîß DEBUG: flow_data depois:`, JSON.stringify(flow.flow_data, null, 2));

    res.json({
      message: 'Fluxo atualizado com sucesso',
      flow
    });
  } catch (error) {
    console.error('Erro ao atualizar fluxo:', error);
    
    // Se for erro de JSON inv√°lido, tentar sanitizar
    if (error.name === 'SequelizeDatabaseError' && error.original?.code === 'ER_INVALID_JSON_TEXT') {
      console.log('üîß Detectado erro de JSON inv√°lido - tentando sanitizar...');
      
      try {
        // Sanitizar o flow_data
        const sanitizedData = sanitizeUnicodeForJSON(req.body.flow_data);
        req.body.flow_data = sanitizedData;
        
        console.log('üîß JSON sanitizado - tentando salvar novamente...');
        await flow.update(req.body);
        
        console.log('‚úÖ Fluxo salvo com sucesso ap√≥s sanitiza√ß√£o!');
        return res.json({
          message: 'Fluxo atualizado com sucesso (com sanitiza√ß√£o)',
          flow
        });
      } catch (sanitizeError) {
        console.error('‚ùå Erro mesmo ap√≥s sanitiza√ß√£o:', sanitizeError);
      }
    }
    
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Deletar fluxo
router.delete('/:id', validateParams(schemas.idParam), async (req, res) => {
  try {
    const flow = await Flow.findOne({
      where: { id: req.params.id },
      include: [
        {
          model: Bot,
          as: 'bot',
          where: { user_id: req.user.id }
        }
      ]
    });

    if (!flow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    // N√£o permitir deletar fluxo padr√£o se for o √∫nico ativo
    if (flow.is_default) {
      const activeFlowsCount = await Flow.count({
        where: { 
          bot_id: flow.bot_id,
          is_active: true,
          id: { [require('sequelize').Op.ne]: flow.id }
        }
      });

      if (activeFlowsCount === 0) {
        return res.status(400).json({
          error: 'N√£o √© poss√≠vel deletar o √∫nico fluxo ativo do bot',
          code: 'CANNOT_DELETE_ONLY_ACTIVE_FLOW'
        });
      }
    }

    await flow.destroy();

    res.json({
      message: 'Fluxo deletado com sucesso'
    });
  } catch (error) {
    console.error('Erro ao deletar fluxo:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Duplicar fluxo
router.post('/:id/duplicate', validateParams(schemas.idParam), async (req, res) => {
  try {
    const originalFlow = await Flow.findOne({
      where: { id: req.params.id },
      include: [
        {
          model: Bot,
          as: 'bot',
          where: { user_id: req.user.id }
        }
      ]
    });

    if (!originalFlow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    const duplicatedFlow = await Flow.create({
      bot_id: originalFlow.bot_id,
      name: `${originalFlow.name} (C√≥pia)`,
      description: originalFlow.description,
      flow_data: originalFlow.flow_data,
      trigger_keywords: originalFlow.trigger_keywords,
      trigger_conditions: originalFlow.trigger_conditions,
      priority: originalFlow.priority,
      is_active: false,
      is_default: false
    });

    res.status(201).json({
      message: 'Fluxo duplicado com sucesso',
      flow: duplicatedFlow
    });
  } catch (error) {
    console.error('Erro ao duplicar fluxo:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Testar fluxo
router.post('/:id/test', validateParams(schemas.idParam), async (req, res) => {
  try {
    const { message, user_phone = 'test_user' } = req.body;

    const flow = await Flow.findOne({
      where: { id: req.params.id },
      include: [
        {
          model: Bot,
          as: 'bot',
          where: { user_id: req.user.id }
        }
      ]
    });

    if (!flow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    // Usar o processador de fluxos para testar
    const FlowProcessor = require('../services/FlowProcessor');
    const processor = new FlowProcessor();

    // Criar objetos mock para teste
    const mockBot = flow.bot || { id: flow.bot_id, name: 'Bot Teste' };
    const mockConversation = {
      id: 'test-conversation',
      botId: flow.bot_id,
      phoneNumber: user_phone || '5511999999999',
      user_phone: user_phone || '5511999999999',
      status: 'active'
    };
    const mockMessage = {
      content: message || 'Teste',
      type: 'text',
      timestamp: new Date()
    };

    const result = await processor.processMessage(
      mockBot,
      mockConversation,
      mockMessage,
      flow
    );

    res.json({
      message: 'Teste executado com sucesso',
      result
    });
  } catch (error) {
    console.error('Erro ao testar fluxo:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Exportar fluxo
router.get('/:id/export', validateParams(schemas.idParam), async (req, res) => {
  try {
    const flow = await Flow.findOne({
      where: { id: req.params.id },
      include: [
        {
          model: Bot,
          as: 'bot',
          where: { user_id: req.user.id }
        }
      ]
    });

    if (!flow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    const exportData = {
      name: flow.name,
      description: flow.description,
      flow_data: flow.flow_data,
      trigger_keywords: flow.trigger_keywords,
      trigger_conditions: flow.trigger_conditions,
      version: flow.version,
      exported_at: new Date(),
      exported_by: req.user.name
    };

    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', `attachment; filename="flow_${flow.id}_${flow.name.replace(/[^a-zA-Z0-9]/g, '_')}.json"`);
    res.json(exportData);
  } catch (error) {
    console.error('Erro ao exportar fluxo:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Ativar fluxo
router.patch('/:id/activate', validateParams(schemas.idParam), async (req, res) => {
  try {
    const flow = await Flow.findOne({
      where: { id: req.params.id },
      include: [{
        model: Bot,
        as: 'bot',
        where: { user_id: req.user.id }
      }]
    });

    if (!flow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    await flow.update({ is_active: true });

    res.json({
      message: 'Fluxo ativado com sucesso',
      flow: flow
    });
  } catch (error) {
    console.error('Erro ao ativar fluxo:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Desativar fluxo
router.patch('/:id/deactivate', validateParams(schemas.idParam), async (req, res) => {
  try {
    const flow = await Flow.findOne({
      where: { id: req.params.id },
      include: [{
        model: Bot,
        as: 'bot',
        where: { user_id: req.user.id }
      }]
    });

    if (!flow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    await flow.update({ is_active: false });

    res.json({
      message: 'Fluxo desativado com sucesso',
      flow: flow
    });
  } catch (error) {
    console.error('Erro ao desativar fluxo:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Definir como fluxo padr√£o
router.patch('/:id/set-default', validateParams(schemas.idParam), async (req, res) => {
  try {
    const flow = await Flow.findOne({
      where: { id: req.params.id },
      include: [{
        model: Bot,
        as: 'bot',
        where: { user_id: req.user.id }
      }]
    });

    if (!flow) {
      return res.status(404).json({
        error: 'Fluxo n√£o encontrado',
        code: 'FLOW_NOT_FOUND'
      });
    }

    // Remover is_default de outros fluxos do mesmo bot
    await Flow.update(
      { is_default: false },
      { where: { bot_id: flow.bot_id } }
    );

    // Definir este fluxo como padr√£o
    await flow.update({ is_default: true, is_active: true });

    res.json({
      message: 'Fluxo definido como padr√£o com sucesso',
      flow: flow
    });
  } catch (error) {
    console.error('Erro ao definir fluxo padr√£o:', error);
    res.status(500).json({
      error: 'Erro interno do servidor',
      code: 'INTERNAL_ERROR'
    });
  }
});

// Endpoint para limpar cache de fluxos
router.post('/clear-cache', async (req, res) => {
  try {
    console.log('üßπ Iniciando limpeza de cache via API...');

    // Importar servi√ßos necess√°rios
    const { Conversation, Message } = require('../models');

    // 1. Limpar conversas ativas
    const deletedConversations = await Conversation.destroy({
      where: {},
      force: true
    });

    // 2. Limpar mensagens antigas (√∫ltimas 2 horas)
    const deletedMessages = await Message.destroy({
      where: {
        created_at: {
          [require('sequelize').Op.lt]: new Date(Date.now() - 2 * 60 * 60 * 1000)
        }
      }
    });

    // 3. Limpar cache do MaytapiFlowProcessor se dispon√≠vel
    const BotManager = require('../services/BotManager');
    if (BotManager.maytapiFlowProcessor) {
      BotManager.maytapiFlowProcessor.clearAllCache();
    }

    console.log(`‚úÖ Cache limpo: ${deletedConversations} conversas, ${deletedMessages} mensagens`);

    res.json({
      success: true,
      message: 'Cache limpo com sucesso',
      data: {
        conversationsDeleted: deletedConversations,
        messagesDeleted: deletedMessages
      }
    });

  } catch (error) {
    console.error('‚ùå Erro ao limpar cache:', error);
    res.status(500).json({
      error: 'Erro ao limpar cache',
      code: 'CACHE_CLEAR_ERROR',
      details: error.message
    });
  }
});

// Gerar fluxo com IA
router.post('/generate-with-ai', async (req, res) => {
  try {
    const { description, flowData, bot_id } = req.body;

    if (!description || !description.trim()) {
      return res.status(400).json({
        error: 'Descri√ß√£o √© obrigat√≥ria',
        code: 'DESCRIPTION_REQUIRED'
      });
    }

    // Usar o AIService para gerar o fluxo
    const AIService = require('../services/AIService');
    const aiService = new AIService();

    // Prompt especializado e melhorado para cria√ß√£o de fluxos
    const systemPrompt = buildEnhancedFlowPrompt(flowData);

    const aiResponse = await aiService.generateResponse({
      message: `Crie um fluxo conversacional com base nestas especifica√ß√µes:\n\n${description}`,
      context: [],
      config: {
        system_prompt: systemPrompt,
        temperature: 0.7,
        max_tokens: 3000
      }
    });

    let generatedFlow;

    if (aiResponse && aiResponse.content) {
      try {
        // Tentar parsear a resposta da IA
        const cleanContent = aiResponse.content.replace(/```json\n?|\n?```/g, '').trim();
        generatedFlow = JSON.parse(cleanContent);

        // Validar estrutura b√°sica
        if (!generatedFlow.flow_data || !generatedFlow.flow_data.nodes) {
          throw new Error('Estrutura de fluxo inv√°lida');
        }

        // Aprimorar o fluxo com dados espec√≠ficos
        generatedFlow = enhanceFlowWithData(generatedFlow, flowData);

      } catch (parseError) {
        console.error('Erro ao parsear resposta da IA:', parseError);
        // Fallback: criar um fluxo b√°sico
        generatedFlow = createFallbackFlow(description, bot_id);
      }
    } else {
      // Fallback: criar um fluxo b√°sico
      generatedFlow = createFallbackFlow(description, bot_id);
    }

    // Adicionar bot_id se fornecido
    if (bot_id) {
      generatedFlow.bot_id = bot_id;
    }

    res.json({
      success: true,
      flow: generatedFlow,
      ai_used: true,
      confidence: aiResponse?.confidence || 0.8
    });

  } catch (error) {
    console.error('Erro ao gerar fluxo com IA:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao gerar fluxo',
      code: 'AI_GENERATION_ERROR',
      details: error.message
    });
  }
});

// Obter templates de fluxos
router.get('/templates', async (req, res) => {
  try {
    console.log('üé® Buscando templates de fluxos...');
    
    const FlowTemplateService = require('../services/FlowTemplateService');
    const templateService = new FlowTemplateService();
    
    const { category, search } = req.query;
    
    let templates;
    
    if (category) {
      templates = templateService.getTemplatesByCategory(category);
    } else if (search) {
      templates = templateService.searchTemplates(search);
    } else {
      templates = templateService.getAllTemplates();
    }
    
    res.json({
      message: 'Templates obtidos com sucesso',
      templates: templates,
      categories: templateService.getCategories(),
      total: templates.length
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao obter templates:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao obter templates',
      code: 'INTERNAL_ERROR',
      details: error.message
    });
  }
});

// Criar fluxo a partir de template
router.post('/from-template/:templateId', authenticateToken, async (req, res) => {
  try {
    const { templateId } = req.params;
    const { customizations } = req.body;
    
    console.log('üé® Criando fluxo a partir do template:', templateId);
    console.log('üé® Customiza√ß√µes:', customizations);
    
    const FlowTemplateService = require('../services/FlowTemplateService');
    const templateService = new FlowTemplateService();
    
    // Verificar se o template existe
    const template = templateService.getTemplateById(templateId);
    if (!template) {
      return res.status(404).json({
        error: 'Template n√£o encontrado',
        code: 'TEMPLATE_NOT_FOUND'
      });
    }
    
    // Verificar se o bot pertence ao usu√°rio
    if (customizations.bot_id) {
      const bot = await Bot.findOne({
        where: { 
          id: customizations.bot_id, 
          user_id: req.user.id 
        }
      });
      
      if (!bot) {
        return res.status(404).json({
          error: 'Bot n√£o encontrado ou voc√™ n√£o tem permiss√£o para acess√°-lo',
          code: 'BOT_NOT_FOUND'
        });
      }
    }
    
    // Criar fluxo a partir do template
    const flowData = templateService.createFlowFromTemplate(templateId, {
      ...customizations,
      user_id: req.user.id
    });
    
    // Salvar no banco
    const flow = await Flow.create({
      ...flowData,
      user_id: req.user.id,
      created_at: new Date(),
      updated_at: new Date()
    });
    
    console.log('‚úÖ Fluxo criado a partir do template:', flow.id);
    
    res.status(201).json({
      message: 'Fluxo criado com sucesso a partir do template',
      flow: flow,
      template: {
        id: templateId,
        name: template.name
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao criar fluxo a partir do template:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao criar fluxo',
      code: 'INTERNAL_ERROR',
      details: error.message
    });
  }
});

// Fun√ß√£o para criar prompt melhorado baseado nos dados estruturados
function buildEnhancedFlowPrompt(flowData = {}) {
  const { flowType, businessType, objectives, hasOperatorTransfer, menuOptions } = flowData;
  
  let prompt = `Voc√™ √© um ESPECIALISTA EM CRIA√á√ÉO DE FLUXOS CONVERSACIONAIS para chatbots do WhatsApp.

MISS√ÉO: Criar um fluxo COMPLETO, FUNCIONAL e PROFISSIONAL baseado nas especifica√ß√µes fornecidas.

CONTEXTO ESPEC√çFICO:
- Tipo de Fluxo: ${flowType || 'atendimento'}
- Tipo de Neg√≥cio: ${businessType || 'neg√≥cio gen√©rico'}
- Objetivos: ${objectives?.join(', ') || 'atendimento geral'}
- Transfer√™ncia para Operador: ${hasOperatorTransfer ? 'SIM - obrigat√≥rio incluir' : 'N√ÉO'}
- Op√ß√µes do Menu: ${menuOptions?.join(', ') || 'op√ß√µes padr√£o'}

ESTRUTURA OBRIGAT√ìRIA DO JSON:
{
  "name": "Nome Espec√≠fico do Fluxo",
  "description": "Descri√ß√£o detalhada",
  "trigger_keywords": ["palavras", "relacionadas", "ao", "neg√≥cio"],
  "bot_id": null,
  "is_active": true,
  "is_default": false,
  "flow_data": {
    "nodes": [
      // N√≥s detalhados aqui
    ],
    "edges": [
      // Conex√µes visuais aqui
    ],
    "viewport": {"x": 0, "y": 0, "zoom": 1}
  }
}

TIPOS DE N√ìS E ESTRUTURAS:

üéØ START NODE:
{
  "id": "start",
  "type": "start",
  "position": {"x": 100, "y": 100},
  "next": "welcome"
}

üìù MESSAGE NODE:
{
  "id": "welcome",
  "type": "message",
  "position": {"x": 100, "y": 200},
  "next": "menu",
  "content": "Mensagem personalizada com emojis relacionados ao neg√≥cio üéâ"
}

üì• INPUT NODE:
{
  "id": "input_opcao",
  "type": "input",
  "position": {"x": 100, "y": 300},
  "next": "condition_opcao",
  "content": "Digite sua escolha:",
  "variable": "opcao_escolhida"
}

‚ö° CONDITION NODE:
{
  "id": "condition_opcao",
  "type": "condition",
  "position": {"x": 100, "y": 400},
  "conditions": [
    {"value": "1", "operator": "equals", "variable": "opcao_escolhida", "next": "opcao_1"},
    {"value": "2", "operator": "equals", "variable": "opcao_escolhida", "next": "opcao_2"}
  ],
  "fallback": "opcao_invalida"
}

ü§ñ AI_RESPONSE NODE:
{
  "id": "ai_atendimento",
  "type": "ai_response",
  "position": {"x": 100, "y": 500},
  "next": "menu",
  "data": {
    "system_prompt": "Voc√™ √© um assistente especializado em ${businessType}. Responda perguntas sobre ${objectives?.join(', ')}.",
    "temperature": 0.7,
    "max_tokens": 500,
    "fallback_message": "Desculpe, n√£o consegui processar. Que tal falar com um atendente?"
  }
}`;

  if (hasOperatorTransfer) {
    prompt += `

üë®‚Äçüíº TRANSFERIR PARA OPERADOR (2 n√≥s OBRIGAT√ìRIOS):
// 1. Mensagem informativa
{
  "id": "transferir_operador",
  "type": "message",
  "position": {"x": 400, "y": 600},
  "next": "acao_transferir",
  "content": "üë®‚Äçüíº **TRANSFERINDO PARA ATENDENTE**\\n\\n‚úÖ Conectando voc√™ com nossa equipe especializada em ${businessType}!\\n\\n‚è±Ô∏è **Hor√°rio de atendimento:**\\nüïï Segunda a Sexta: 08:00 √†s 18:00\\nüïò S√°bados: 08:00 √†s 12:00\\n\\nüìû **Aguarde um momento...**"
}

// 2. A√ß√£o de transfer√™ncia
{
  "id": "acao_transferir",
  "type": "action",
  "position": {"x": 400, "y": 750},
  "next": "end",
  "content": "",
  "action": "transfer_to_human"
}`;
  }

  prompt += `

REGRAS ESPEC√çFICAS PARA ESTE FLUXO:
‚úÖ Criar fluxo espec√≠fico para ${businessType}
‚úÖ Incluir todas as op√ß√µes: ${menuOptions?.join(', ')}
‚úÖ Focar nos objetivos: ${objectives?.join(', ')}
‚úÖ Usar linguagem adequada ao tipo de neg√≥cio
‚úÖ Incluir emojis relacionados ao segmento
‚úÖ Posi√ß√µes escalonadas (x: 100, 300, 500 / y: 100, 200, 300...)
‚úÖ IDs descritivos e √∫nicos
‚úÖ Fluxo completo do in√≠cio ao fim
${hasOperatorTransfer ? '‚úÖ OBRIGAT√ìRIO: Incluir op√ß√£o para transferir para operador' : ''}

IMPORTANTE: Crie um fluxo REAL e √öTIL para ${businessType}, n√£o gen√©rico!

Responda APENAS com o JSON v√°lido, sem explica√ß√µes adicionais.`;

  return prompt;
}

// Fun√ß√£o para aprimorar o fluxo com dados espec√≠ficos
function enhanceFlowWithData(flow, flowData) {
  if (!flowData) return flow;
  
  // Atualizar nome se for gen√©rico
  if (flow.name === "Fluxo Gerado por IA" && flowData.businessType) {
    flow.name = `Fluxo de ${flowData.flowType} - ${flowData.businessType}`;
  }
  
  // Adicionar palavras-chave espec√≠ficas
  if (flowData.businessType) {
    const businessKeywords = flowData.businessType.toLowerCase().split(' ');
    flow.trigger_keywords = [...(flow.trigger_keywords || []), ...businessKeywords];
  }
  
  // Remover duplicatas das palavras-chave
  flow.trigger_keywords = [...new Set(flow.trigger_keywords)];
  
  return flow;
}

// Fun√ß√£o para criar fluxo b√°sico como fallback
function createFallbackFlow(description, bot_id) {
  return {
    name: "Fluxo Gerado por IA",
    description: description,
    trigger_keywords: ["oi", "ol√°", "menu", "ajuda"],
    bot_id: bot_id || null,
    is_active: true,
    is_default: false,
    flow_data: {
      nodes: [
        {
          id: "start",
          type: "start",
          position: { x: 100, y: 100 },
          next: "welcome"
        },
        {
          id: "welcome",
          type: "message",
          content: "Ol√°! üëã Bem-vindo ao nosso atendimento!\n\nComo posso ajud√°-lo hoje?",
          position: { x: 100, y: 200 },
          next: "menu"
        },
        {
          id: "menu",
          type: "message",
          content: "Escolha uma op√ß√£o:\n\n1Ô∏è‚É£ Informa√ß√µes\n2Ô∏è‚É£ Suporte com IA\n3Ô∏è‚É£ Falar com atendente\n\nDigite o n√∫mero da op√ß√£o:",
          position: { x: 100, y: 300 },
          next: "input_opcao"
        },
        {
          id: "input_opcao",
          type: "input",
          content: "Aguardando sua escolha...",
          position: { x: 100, y: 400 },
          next: "condition_opcao",
          variable: "opcao_menu"
        },
        {
          id: "condition_opcao",
          type: "condition",
          conditions: [
            { value: "1", operator: "equals", variable: "opcao_menu", next: "info" },
            { value: "2", operator: "equals", variable: "opcao_menu", next: "support_ai" },
            { value: "3", operator: "equals", variable: "opcao_menu", next: "transferir_operador" }
          ],
          position: { x: 100, y: 500 },
          fallback: "opcao_invalida"
        },
        {
          id: "info",
          type: "message",
          content: `‚ÑπÔ∏è **Informa√ß√µes sobre ${description}**\n\nAqui est√£o nossas informa√ß√µes principais.\n\n‚úÖ Estamos dispon√≠veis para ajud√°-lo!\nüìû Entre em contato conosco sempre que precisar.\n\nObrigado pelo contato! üòä`,
          position: { x: 200, y: 600 },
          next: "end"
        },
        {
          id: "support_ai",
          type: "ai_response",
          position: { x: 300, y: 600 },
          next: "menu",
          data: {
            system_prompt: `Voc√™ √© um assistente de suporte especializado em ${description}. Ajude o usu√°rio de forma √∫til, profissional e amig√°vel. Se n√£o conseguir resolver, sugira falar com um atendente humano.`,
            temperature: 0.7,
            max_tokens: 500,
            fallback_message: "Desculpe, n√£o consegui processar sua mensagem. Que tal falar com um de nossos atendentes? Digite 3 no menu principal."
          }
        },
        {
          id: "transferir_operador",
          type: "message",
          content: "üë®‚Äçüíº **TRANSFERINDO PARA ATENDENTE**\n\n‚úÖ Voc√™ ser√° conectado com nossa equipe especializada!\n\n‚è±Ô∏è **Hor√°rio de atendimento:**\nüïï Segunda a Sexta: 08:00 √†s 18:00\nüïò S√°bados: 08:00 √†s 12:00\n\nüìû **O que nosso atendente pode fazer:**\n‚Ä¢ Resolver quest√µes complexas\n‚Ä¢ Dar suporte personalizado\n‚Ä¢ Finalizar negocia√ß√µes\n‚Ä¢ Tirar d√∫vidas espec√≠ficas\n\nüîÑ **Conectando... aguarde um momento**",
          position: { x: 400, y: 600 },
          next: "acao_transferir"
        },
        {
          id: "acao_transferir",
          type: "action",
          position: { x: 400, y: 750 },
          next: "end",
          content: "",
          action: "transfer_to_human"
        },
        {
          id: "opcao_invalida",
          type: "message",
          content: "‚ùå **Op√ß√£o inv√°lida!**\n\nüîç Por favor, digite apenas:\n‚Ä¢ **1** = Informa√ß√µes\n‚Ä¢ **2** = Suporte com IA\n‚Ä¢ **3** = Falar com atendente\n\nüîÑ Voltando ao menu...",
          position: { x: 500, y: 600 },
          next: "menu"
        },
        {
          id: "end",
          type: "end",
          position: { x: 300, y: 900 },
          content: "Obrigado pelo contato! üòä\n\nVolte sempre que precisar de ajuda!"
        }
      ],
      edges: [
        { id: "e1", source: "start", target: "welcome" },
        { id: "e2", source: "welcome", target: "menu" },
        { id: "e3", source: "menu", target: "input_opcao" },
        { id: "e4", source: "input_opcao", target: "condition_opcao" },
        { id: "e5", source: "condition_opcao", target: "info" },
        { id: "e6", source: "condition_opcao", target: "support_ai" },
        { id: "e7", source: "condition_opcao", target: "transferir_operador" },
        { id: "e8", source: "condition_opcao", target: "opcao_invalida" },
        { id: "e9", source: "info", target: "end" },
        { id: "e10", source: "support_ai", target: "menu" },
        { id: "e11", source: "transferir_operador", target: "acao_transferir" },
        { id: "e12", source: "acao_transferir", target: "end" },
        { id: "e13", source: "opcao_invalida", target: "menu" }
      ],
      viewport: { x: 0, y: 0, zoom: 1 }
    }
  };
}

// Fun√ß√£o para aplicar edi√ß√µes simples quando a IA falha
function applySimpleFlowEdit(currentFlow, description) {
  const lowerDescription = description.toLowerCase();

  // Detectar comando de remo√ß√£o de op√ß√µes - regex mais flex√≠vel
  const removeOptionMatch = lowerDescription.match(/(?:retire?|remova?|exclua?).*(?:op√ß√£o|opcao|opcoes|op√ß√µes)\s*(\d+)(?:\s*(?:e|,)\s*(\d+))?/);

  // Tamb√©m detectar padr√µes como "op√ß√µes 4 e 5" ou "4 e 5"
  const removeNumbersMatch = lowerDescription.match(/(?:op√ß√µes?|opcoes?)\s*(\d+)\s*(?:e|,)\s*(\d+)|(\d+)\s*(?:e|,)\s*(\d+)/);

  if (removeOptionMatch || removeNumbersMatch) {
    let optionsToRemove = [];

    if (removeOptionMatch) {
      optionsToRemove.push(removeOptionMatch[1]);
      if (removeOptionMatch[2]) {
        optionsToRemove.push(removeOptionMatch[2]);
      }
    } else if (removeNumbersMatch) {
      if (removeNumbersMatch[1] && removeNumbersMatch[2]) {
        optionsToRemove.push(removeNumbersMatch[1], removeNumbersMatch[2]);
      } else if (removeNumbersMatch[3] && removeNumbersMatch[4]) {
        optionsToRemove.push(removeNumbersMatch[3], removeNumbersMatch[4]);
      }
    }

    console.log('ü§ñ Fallback: Removendo op√ß√µes', optionsToRemove);

    return {
      ...currentFlow,
      description: `${currentFlow.description} (Editado: ${description})`,
      flow_data: {
        ...currentFlow.flow_data,
        nodes: currentFlow.flow_data.nodes.map(node => {
          // Encontrar n√≥ de mensagem com menu
          if (node.type === 'message' && node.content && node.content.includes('Escolha uma op√ß√£o:')) {
            let newContent = node.content;

            // Remover as linhas das op√ß√µes especificadas
            optionsToRemove.forEach(optionNum => {
              const regex = new RegExp(`\\n?${optionNum}[Ô∏è‚É£]*\\s*[^\\n]*`, 'g');
              newContent = newContent.replace(regex, '');
            });

            return {
              ...node,
              content: newContent.trim()
            };
          }

          // Remover n√≥s de condi√ß√£o relacionados √†s op√ß√µes removidas
          if (node.type === 'condition' && node.conditions) {
            const filteredConditions = node.conditions.filter(condition => {
              return !optionsToRemove.includes(condition.value);
            });

            return {
              ...node,
              conditions: filteredConditions
            };
          }

          return node;
        }),
        edges: currentFlow.flow_data.edges.filter(edge => {
          // Manter apenas edges que n√£o levam a n√≥s de op√ß√µes removidas
          const sourceNode = currentFlow.flow_data.nodes.find(n => n.id === edge.source);
          if (sourceNode && sourceNode.type === 'condition') {
            const condition = sourceNode.conditions?.find(c =>
              optionsToRemove.includes(c.value) && c.next === edge.target
            );
            return !condition;
          }
          return true;
        })
      }
    };
  }

  // Detectar comando de altera√ß√£o de texto - regex mais flex√≠vel
  const changeTextMatch = lowerDescription.match(/(?:altere?|mude?|substitua?|troque?|edite?)\s+(?:o\s+texto\s+)?(?:da\s+op√ß√£o\s+\d+\s+)?(?:de\s+)?(.+?)\s+para\s+(.+)/);
  if (changeTextMatch) {
    const fromText = changeTextMatch[1].trim();
    const toText = changeTextMatch[2].trim();

    console.log('ü§ñ Fallback: Alterando texto de', fromText, 'para', toText);

    return {
      ...currentFlow,
      description: `${currentFlow.description} (Editado: ${description})`,
      flow_data: {
        ...currentFlow.flow_data,
        nodes: currentFlow.flow_data.nodes.map(node => {
          if (node.type === 'message' && node.content) {
            // Fazer substitui√ß√£o case-insensitive
            const regex = new RegExp(fromText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gi');
            const newContent = node.content.replace(regex, toText);

            if (newContent !== node.content) {
              return {
                ...node,
                content: newContent
              };
            }
          }
          return node;
        })
      }
    };
  }

  // Detectar comando para criar menu de op√ß√µes - regex mais flex√≠vel
  const createMenuMatch = lowerDescription.match(/(?:vamos\s+)?(?:colocar|criar|adicionar|fazer).*(?:usuario|usu√°rio).*(?:escolher|selecionar).*(?:temos|s√£o)\s+(.+)/) ||
                          lowerDescription.match(/(?:temos|s√£o|op√ß√µes|opcoes):\s*(.+)/) ||
                          lowerDescription.match(/(?:temos)\s+([^.]+)/);
  if (createMenuMatch) {
    const optionsText = createMenuMatch[1];
    const options = optionsText.split(/[,;]/).map(opt => opt.trim()).filter(opt => opt.length > 0);

    console.log('ü§ñ Fallback: Criando menu com op√ß√µes:', options);

    return {
      ...currentFlow,
      description: `${currentFlow.description} (Editado: ${description})`,
      flow_data: {
        ...currentFlow.flow_data,
        nodes: currentFlow.flow_data.nodes.map(node => {
          // Encontrar n√≥ que pede input de cidade
          if (node.type === 'message' && node.content &&
              (node.content.includes('cidade de ORIGEM') || node.content.includes('digite a cidade'))) {

            // Criar menu de op√ß√µes
            let menuContent = node.content.split('\n')[0]; // Manter primeira linha
            menuContent += '\n\nEscolha uma cidade:\n\n';

            options.forEach((option, index) => {
              menuContent += `${index + 1}Ô∏è‚É£ ${option}\n`;
            });

            menuContent += '\nDigite o n√∫mero da op√ß√£o desejada:';

            return {
              ...node,
              content: menuContent
            };
          }
          return node;
        })
      }
    };
  }

  // Fallback gen√©rico para outros comandos
  return {
    ...currentFlow,
    description: `${currentFlow.description} (Editado: ${description})`,
    flow_data: {
      ...currentFlow.flow_data,
      nodes: currentFlow.flow_data.nodes.map(node => {
        // Modificar o primeiro n√≥ de mensagem encontrado
        if (node.type === 'message' && node.content) {
          return {
            ...node,
            content: `${node.content}\n\n‚ú® Editado com IA: ${description}`
          };
        }
        return node;
      })
    }
  };
}

// Editar fluxo com IA
router.post('/edit-with-ai', async (req, res) => {
  try {
    console.log('ü§ñ Iniciando edi√ß√£o com IA...');
    
    const { description, editData, currentFlow } = req.body;

    // Valida√ß√£o b√°sica
    if (!description || !description.trim()) {
      return res.status(400).json({
        error: 'Descri√ß√£o das mudan√ßas √© obrigat√≥ria',
        code: 'DESCRIPTION_REQUIRED'
      });
    }

    if (!currentFlow || !currentFlow.flow_data || !currentFlow.flow_data.nodes) {
      return res.status(400).json({
        error: 'Fluxo atual inv√°lido',
        code: 'INVALID_CURRENT_FLOW'
      });
    }

    console.log(`ü§ñ Editando fluxo ID: ${currentFlow.id}, Nome: ${currentFlow.name}`);
    console.log(`ü§ñ N√∫mero de n√≥s no fluxo atual: ${currentFlow.flow_data.nodes.length}`);

    // Usar o AIService para editar o fluxo
    const AIService = require('../services/AIService');
    const aiService = new AIService();

    // Prompt especializado e melhorado para edi√ß√£o de fluxos
    const systemPrompt = buildEnhancedEditPrompt(editData, currentFlow);

    const contextMessage = `Fluxo atual:
${JSON.stringify(currentFlow, null, 2)}

Mudan√ßas solicitadas: ${description}`;

    let aiResponse = null;

    try {
      aiResponse = await aiService.generateResponse({
        message: contextMessage,
        context: [],
        config: {
          system_prompt: systemPrompt,
          temperature: 0.7,
          max_tokens: 4000
        }
      });
    } catch (aiError) {
      console.error('Erro ao gerar resposta com IA:', aiError);
      aiResponse = null;
    }

    let editedFlow;
    let aiResult;

    if (aiResponse && aiResponse.content) {
      try {
        console.log('ü§ñ Resposta bruta da IA (primeiros 500 chars):', aiResponse.content.substring(0, 500));

        // Limpar a resposta da IA de forma mais robusta
        let cleanContent = aiResponse.content.trim();

        // Remover markdown code blocks
        cleanContent = cleanContent.replace(/```json\s*/g, '');
        cleanContent = cleanContent.replace(/```\s*/g, '');

        // Remover texto explicativo antes e depois do JSON
        const jsonStart = cleanContent.indexOf('{');
        const jsonEnd = cleanContent.lastIndexOf('}');

        if (jsonStart === -1 || jsonEnd === -1 || jsonEnd <= jsonStart) {
          throw new Error('JSON n√£o encontrado na resposta da IA');
        }

        cleanContent = cleanContent.substring(jsonStart, jsonEnd + 1);

        // Tentar corrigir problemas comuns de JSON
        cleanContent = cleanContent
          .replace(/,\s*}/g, '}')  // Remove v√≠rgulas antes de }
          .replace(/,\s*]/g, ']')  // Remove v√≠rgulas antes de ]
          .replace(/'/g, '"')      // Substitui aspas simples por duplas

        console.log('ü§ñ Conte√∫do limpo (primeiros 500 chars):', cleanContent.substring(0, 500));

        // Tentar parsear
        aiResult = JSON.parse(cleanContent);
        console.log('ü§ñ JSON parseado com sucesso!');

        // Verificar se tem an√°lise e fluxo
        if (!aiResult || !aiResult.flow) {
          throw new Error('Estrutura de resposta inv√°lida da IA');
        }

        editedFlow = aiResult.flow;
        console.log('ü§ñ Fluxo editado extra√≠do com sucesso');

        // Aplicar melhorias baseadas nos dados estruturados
        editedFlow = enhanceEditedFlow(editedFlow, editData, currentFlow);

      } catch (parseError) {
        console.error('ü§ñ Erro ao parsear resposta da IA:', parseError);
        console.log('ü§ñ Conte√∫do que causou erro:', aiResponse.content);
        
        // Fallback: aplicar edi√ß√£o simples
        editedFlow = applySimpleFlowEdit(currentFlow, description);
        aiResult = { analysis: 'Falha no processamento da IA. Aplicando edi√ß√£o b√°sica.' };
      }
    } else {
      console.log('ü§ñ IA n√£o retornou resposta v√°lida, usando fallback...');
      // Fallback: aplicar edi√ß√£o simples
      editedFlow = applySimpleFlowEdit(currentFlow, description);
      aiResult = { analysis: 'IA indispon√≠vel. Aplicando edi√ß√£o b√°sica.' };
    }

    // Garantir que o fluxo editado tem estrutura v√°lida
    if (!editedFlow || !editedFlow.flow_data || !editedFlow.flow_data.nodes) {
      console.error('ü§ñ Fluxo editado inv√°lido, usando original');
      editedFlow = currentFlow;
      aiResult = { analysis: 'N√£o foi poss√≠vel aplicar as mudan√ßas. Fluxo mantido inalterado.' };
    }

    console.log('ü§ñ Edi√ß√£o conclu√≠da com sucesso');
    
    res.json({
      success: true,
      flow: editedFlow,
      analysis: aiResult?.analysis || 'Mudan√ßas aplicadas com sucesso.',
      ai_used: true,
      confidence: aiResponse?.confidence || 0.7
    });

  } catch (error) {
    console.error('Erro ao editar fluxo com IA:', error);
    res.status(500).json({
      error: 'Erro interno do servidor ao editar fluxo',
      code: 'AI_EDIT_ERROR',
      details: error.message
    });
  }
});

// Fun√ß√£o para criar prompt melhorado para edi√ß√£o baseado nos dados estruturados
function buildEnhancedEditPrompt(editData = {}, currentFlow = {}) {
  const { changeType, targetArea, specificRequest, addTransferOption, menuChanges } = editData;
  
  let prompt = `Voc√™ √© um ESPECIALISTA EM DEBUGGING E EDI√á√ÉO de fluxos conversacionais para chatbots do WhatsApp.

MISS√ÉO: Analisar o fluxo atual e aplicar as mudan√ßas espec√≠ficas solicitadas com PRECIS√ÉO ABSOLUTA.

CONTEXTO DA EDI√á√ÉO:
- Tipo de Altera√ß√£o: ${changeType || 'modificar'}
- √Årea do Fluxo: ${targetArea || 'geral'}
- Solicita√ß√£o: ${specificRequest || 'mudan√ßa geral'}
- Adicionar Transfer√™ncia: ${addTransferOption ? 'SIM - obrigat√≥rio' : 'N√ÉO'}
- Mudan√ßas no Menu: ${menuChanges?.join(', ') || 'nenhuma'}
- Fluxo Atual: ${currentFlow.name || 'sem nome'} (${currentFlow.flow_data?.nodes?.length || 0} n√≥s)

PROCESSO DE EDI√á√ÉO:
1. üîç ANALISE o fluxo atual detalhadamente
2. üéØ IDENTIFIQUE exatamente onde aplicar as mudan√ßas
3. üîß APLIQUE as mudan√ßas ESPEC√çFICAS solicitadas
4. ‚úÖ VALIDE que o fluxo permanece funcional

ESTRUTURA DE RESPOSTA OBRIGAT√ìRIA:
{
  "analysis": "An√°lise detalhada do que foi identificado e alterado",
  "flow": {
    "id": ${currentFlow.id || 'null'},
    "name": "${currentFlow.name || 'Fluxo Editado'}",
    "description": "${currentFlow.description || ''}",
    "trigger_keywords": ${JSON.stringify(currentFlow.trigger_keywords || [])},
    "bot_id": ${currentFlow.bot_id || 'null'},
    "is_active": ${currentFlow.is_active !== undefined ? currentFlow.is_active : true},
    "is_default": ${currentFlow.is_default !== undefined ? currentFlow.is_default : false},
    "flow_data": {
      "nodes": [...n√≥s atualizados...],
      "edges": [...conex√µes atualizadas...],
      "viewport": {"x": 0, "y": 0, "zoom": 1}
    }
  }
}`;

  // Instru√ß√µes espec√≠ficas baseadas no tipo de altera√ß√£o
  if (changeType === 'adicionar' && targetArea === 'menu') {
    prompt += `

INSTRU√á√ÉO ESPEC√çFICA - ADICIONAR AO MENU:
1. Encontre o n√≥ de mensagem que cont√©m o menu principal
2. Adicione as novas op√ß√µes: ${menuChanges?.join(', ')}
3. Atualize o n√≥ condition para incluir as novas condi√ß√µes
4. Crie novos n√≥s para as op√ß√µes adicionadas
5. Conecte tudo com edges apropriadas`;
  }

  if (changeType === 'remover' && targetArea === 'menu') {
    prompt += `

INSTRU√á√ÉO ESPEC√çFICA - REMOVER DO MENU:
1. Encontre o n√≥ de mensagem que cont√©m o menu
2. Remova as op√ß√µes especificadas: ${menuChanges?.join(', ')}
3. Remova as conditions correspondentes
4. Remova os n√≥s relacionados √†s op√ß√µes removidas
5. Atualize as edges`;
  }

  if (changeType === 'corrigir' && targetArea === 'operador') {
    prompt += `

INSTRU√á√ÉO ESPEC√çFICA - CORRIGIR TRANSFER√äNCIA:
1. Identifique onde deveria ter transfer√™ncia para operador
2. Crie 2 n√≥s obrigat√≥rios:
   - N√≥ message informativo sobre transfer√™ncia
   - N√≥ action com "action": "transfer_to_human"
3. Conecte adequadamente ao fluxo`;
  }

  if (addTransferOption) {
    prompt += `

OBRIGAT√ìRIO - ADICIONAR TRANSFER√äNCIA:
Criar 2 n√≥s para transfer√™ncia ao operador:
{
  "id": "transferir_operador",
  "type": "message",
  "position": {"x": 400, "y": 600},
  "next": "acao_transferir",
  "content": "üë®‚Äçüíº **TRANSFERINDO PARA ATENDENTE**\\n\\n‚úÖ Conectando voc√™ com nossa equipe!\\n\\nüìû **Aguarde um momento...**"
}
{
  "id": "acao_transferir", 
  "type": "action",
  "position": {"x": 400, "y": 750},
  "next": "end",
  "content": "",
  "action": "transfer_to_human"
}`;
  }

  prompt += `

REGRAS IMPORTANTES:
‚úÖ Mantenha TODA a estrutura original intacta, exceto onde especificado
‚úÖ IDs √∫nicos para novos n√≥s
‚úÖ Posi√ß√µes adequadas (x,y) para novos elementos
‚úÖ Edges conectando source ‚Üí target corretamente
‚úÖ Conditions com formato: {"value": "X", "operator": "equals", "variable": "Y", "next": "Z"}
‚úÖ Para action: {"action": "transfer_to_human"}
‚úÖ Para ai_response: {"data": {"system_prompt": "...", "temperature": 0.7, "max_tokens": 500}}

CR√çTICO: Aplique EXATAMENTE as mudan√ßas solicitadas, nem mais nem menos!

Responda APENAS com o JSON v√°lido, sem explica√ß√µes adicionais.`;

  return prompt;
}

// Fun√ß√£o para aprimorar o fluxo editado com dados espec√≠ficos
function enhanceEditedFlow(flow, editData, originalFlow) {
  if (!editData || !flow) return flow;
  
  // Preservar IDs e metadados importantes
  flow.id = originalFlow.id;
  flow.bot_id = originalFlow.bot_id;
  
  // Se adicionou transfer√™ncia, garantir que est√° configurada corretamente
  if (editData.addTransferOption && flow.flow_data && flow.flow_data.nodes) {
    const hasTransferNode = flow.flow_data.nodes.some(node => 
      node.type === 'action' && node.action === 'transfer_to_human'
    );
    
    if (!hasTransferNode) {
      // Adicionar n√≥s de transfer√™ncia se n√£o existirem
      const transferNodes = [
        {
          id: "transferir_operador",
          type: "message",
          position: { x: 400, y: 600 },
          next: "acao_transferir",
          content: "üë®‚Äçüíº **TRANSFERINDO PARA ATENDENTE**\n\n‚úÖ Conectando voc√™ com nossa equipe!\n\nüìû **Aguarde um momento...**"
        },
        {
          id: "acao_transferir",
          type: "action", 
          position: { x: 400, y: 750 },
          next: "end",
          content: "",
          action: "transfer_to_human"
        }
      ];
      
      flow.flow_data.nodes.push(...transferNodes);
      
      // Adicionar edges se n√£o existirem
      if (!flow.flow_data.edges) flow.flow_data.edges = [];
      flow.flow_data.edges.push(
        { id: "e_transfer1", source: "transferir_operador", target: "acao_transferir" },
        { id: "e_transfer2", source: "acao_transferir", target: "end" }
      );
    }
  }
  
  return flow;
}

module.exports = router;
